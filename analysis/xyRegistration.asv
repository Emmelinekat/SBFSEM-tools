function S = xyRegistration(source, sections)
% XYREGISTRATION  Generate X,Y scale factors per section
	source = validateSource(source);

	str = sprintf('/Locations?filter=Z le %u and Z ge %u & TypeCode eq 1';

	data = webread([getServiceRoot(source), fTemplate,...
		'&$select=ID,ParentID,X,Y,Z,Radius'], weboptions);

	% Convert to a table
	T = struct2table(data.value);

	% Catch false annotations with X/Y=0
	T(T.X == 0 | T.Y == 0, :) = [];

	% Return annotation and cell counts
	fprintf('The query returned %u annotations from %u cells\n',...
		height(T), numel(unique(T.ParentID)));	
	% And the number of cells with an annotation in each section
	% Later branching neurons will be addressed here but the immediate need 
    % is for aligning in the area of bipolar cell somas without branches
	[neurons, neuronIDs] = findgroups(T.ParentID);

	% Get the XY locations of each neuron at the most sclerad section
	zRef = T(T.Z == max(T.Z), {'ParentID', 'X', 'Y'});

	% Find neurons without annotations at the reference section
	invalidNeurons = setdiff(T.ParentID, zRef.ParentID);
	fprintf('Found %u neurons absent from reference section\n',...
		numel(invalidNeurons));	
	% If present, remove the data from the analysis
	if ~isempty(invalidNeurons)
		T(ismember(T.ParentID, invalidNeurons), :) = [];
	end

	% Create arrays to hold the XY values relative to reference
	T.XShift = zeros(height(T), 1);
	T.YShift = zeros(height(T), 1);

	for i = 1:numel(neuronIDs)
		T(T.ParentID == neuronIDs(i), :).XShift = ...
			zRef{zRef.ParentID == neuronIDs(i), 'X'} -...
			T{T.ParentID == neuronIDs(i), 'X'};
		T(T.ParentID == neuronIDs(i), :).YShift = ...
			zRef{zRef.ParentID == neuronIDs(i), 'Y'} -...
			T{T.ParentID == neuronIDs(i), 'Y'};
	end

	% Find the average shift per Z section
	numSections = unique(T.Z);
	[sectionGroups, sectionIDs] = findgroups(T.Z);
	sectionCount = splitapply(@numel, T.Z, sectionGroups);

	% Output as a structure
	S = struct();
	S.sections = sectionIDs;
	S.xMean = splitapply(@mean, T.XShift, sectionGroups);
	S.yMean = splitapply(@mean, T.YShift, sectionGroups);
	S.xSD = splitapply(@std, T.XShift, sectionGroups);
	S.ySD = splitapply(@std, T.YShift, sectionGroups);
	S.xSEM = splitapply(@sem, T.XShift, sectionGroups);
	S.ySEM = splitapply(@sem, T.YShift, sectionGroups);

	if visualize
		figure('Name', 'XY Image Registration');
		subplot(2,1,1); hold on;
		superbar(sectionIDs,...
			splitapply(@mean, T.XShift, sectionGroups),...
			'E', splitapply(@sem, T.YShift, sectionGroups));
		ylabel('X Offset (µm)');
		title('XY Image Registration');
		subplot(2,1,2); hold on;
		superbar(sectionIDs,...
			splitapply(@mean, T.YShift, sectionGroups),...
			'E', splitapply(@sem, T.YShift, sectionGroups));
		ylabel('Y Offset (µm)');
		xlabel('Section Number');
	end