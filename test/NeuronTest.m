classdef NeuronTest < matlab.unittest.TestCase
% NEURONTEST
%
% Description:
%   Long overdue testing framework. Work in progress
%
% History:
%   30Mar2018 - SSP
% -------------------------------------------------------------------------

	properties
		T1 % Test Neuron 1
		T2 % Test Neuron, 2 equally sized annotations
		PR % Closed curve only 
	end

	methods (TestClassSetup)
		function createNeuron(tc)
			tc.PR = Neuron(2542, 'i');
			tc.T1 = Neuron(7161, 'i');
			tc.T2 = Neuron(7162, 'i', true);
		end
	end

	methods (Test)
		function testSomaSize(testCase)
			import matlab.unittest.constraints.HasElementCount;

			% Radius
			testCase.verifyEqual(...
				testCase.T1.getSomaSize(),...
				max(testCase.T1.nodes.Rum),...
				'Soma radius calculation incorrect');
			% Diameter
			testCase.verifyEqual(...
				testCase.T1.getSomaSize(true),...
				2*max(testCase.T1.nodes.Rum),...
				'Soma diameter calculation incorrect');
			% Cone pedicle (disc approximation of closed curve)
			testCase.verifyEqual(...
				testCase.PR.getSomaSize(),...
				max(testCase.PR.nodes.Rum),...
				'Closed curve soma calculation is incorrect');
			% Multiple soma nodes
			testCase.verifyThat(...
				testCase.T2.getSomaSize(),...
				HasElementCount(1),...
				'More than one soma node returned');
			% Import accuracy
			testCase.verifyEqual(...
				max(testCase.T1.nodes.Radius), 851.79,...
				'AbsTol', 0.01,...
				'Soma size for T1 is incorrect');
		end

		function testSomaID(testCase)
			import matlab.unittest.constraints.HasElementCount;

			testCase.verifyEqual(...
				testCase.T1.getSomaID(), 176264,...
				'Soma ID incorrect');
			testCase.verifyThat(...
				testCase.T2.getSomaID(),...
				HasElementCount(1));
            % TODO: Check clipboard success
        end
        
        function testSomaXYZ(testCase)
            import matlab.unittest.constraints.HasElementCount;
            
            % Import accuracy
            xyz = testCase.T1.getSomaXYZ(false); % unit = pixels
            testCase.verifyEqual(...
            	xyz(1), 7227.79, 'AbsTol', 0.01,...
            	'Soma X value (pixels) is incorrect');
            testCase.verifyEqual(...
            	xyz(2), 1172.65, 'AbsTol', 0.01,...
            	'Soma Y value (pixels) is incorrect');
            testCase.verifyEqual(...
            	xyz(3), 490,...
            	'Soma Z section (number) is incorrect');

            % Correct number for multiple max node case
            testCase.verifyThat(...
                testCase.T2.getSomaXYZ(),...
                HasElementCount(3));         
        end

        function testCellXYZ(testCase)
        	import matlab.unittest.constraints.HasSize;

        	testCase.verifyThat(...
        		testCase.T2.getCellXYZ(),...
        		HasSize([2 3]),...
        		'Cell XYZ size is incorrect');
        end
        
        function testDAspect(testCase)
            testCase.verifyEqual(...
                testCase.T1.getDAspect(), [0.0833 0.0833 1],...
                'AbsTol', 0.01,...
                'XYZ dimensions are incorrect');
        end
        
        function testSynapses(testCase)
        	import matlab.unittest.constraints.HasElementCount;

        	% Parent IDs
        	testCase.verifyEqual(...
        		unique(testCase.T2.synapses.ParentID),...
        		testCase.T2.ID,...
        		'All parent IDs should be the same');

        	% Check that the correct local name exists
        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7233,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'ConvPost',...
        		'Local name does not match tag - ConvPost');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7234,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'ConvPre',...
        		'Local name does not match tag - ConvPre');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7235,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'RibbonPre',...
        		'Local name does not match tag - RibbonPre');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7236,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'RibbonPost',...
        		'Local name does not match tag - RibbonPost');
        	
        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7237,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'GapJunction',...
        		'Local name does not match tag - GapJunction');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7239,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'BasalNTA',...
        		'Local name does not match tag - BasalNTA');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7240,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'GABAPost',...
        		'Local name does not match tag - GABAPost');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7241,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'BasalMNTA',...
        		'Local name does not match tag - BasalMNTA');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7242,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'BasalTA',...
        		'Local name does not match tag - BasalTA');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7243,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'Desmosome',...
        		'Local name does not match tag - Desmosome');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7244,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'Unknown',...
        		'Local name does not match tag - Unknown');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7245,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'BipConvPre',...
        		'Local name does not match tag - BipConvPre');

        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7246,:);
        	testCase.verifyEqual(...
        		char(x.LocalName), 'BipConvPost',...
        		'Local name does not match tag - BipConvPost');

        	% Check that multiple locations are registered
        	x = testCase.T2.synapses(testCase.T2.synapses.ID == 7243,:);
        	testCase.verifyEqual(...
        		x.N, 2,...
        		'Incorrect location count - 7243');
        end
	end
end